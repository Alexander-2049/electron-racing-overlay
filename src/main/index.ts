import { app, BrowserWindow, ipcMain } from "electron";
import { createModsFolder } from "./utils/modsFolder";
import { iRacingSDK } from "./games/iracing/iRacingSDK";
import { connections } from "./wss";
import { SpeedConverter } from "./utils/speedConverter";
import { iracingSteeringAngleToPercents } from "./utils/iracingSteeringAngleToPercents";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

enum SelectedGame {
  "none",
  "iracing",
}

const windows: BrowserWindow[] = [];

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

createModsFolder();

const createWindow = (): BrowserWindow => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 800,
    width: 1200,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
    },
    frame: false,
  });

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  const irsdkipc = new iRacingSDK();
  let selectedGame: SelectedGame = SelectedGame.iracing;

  irsdkipc.on("sessionInfo", (sessionInfo) => {
    if (selectedGame !== SelectedGame.iracing) return;
    windows.forEach((win) => {
      win.webContents.send("iracing-data", sessionInfo);
    });
  });

  irsdkipc.on("telemetry", (telemetry) => {
    if (selectedGame !== SelectedGame.iracing) return;
    connections.rpm.send({
      green: telemetry.data.PlayerCarSLFirstRPM,
      orange: telemetry.data.PlayerCarSLShiftRPM,
      red: telemetry.data.PlayerCarSLLastRPM,
      max: telemetry.data.PlayerCarSLBlinkRPM,
      rpm: telemetry.data.RPM,
    });

    connections.controls.send({
      brake: telemetry.data.Brake,
      clutch: telemetry.data.Clutch,
      steeringAnglePercents: iracingSteeringAngleToPercents(
        telemetry.data.SteeringWheelAngle
      ),
      throttle: telemetry.data.Throttle,
    });

    connections.speed.send({
      displayUnits: telemetry.data.DisplayUnits === 0 ? "IMPERIAL" : "METRIC",
      speedKph: SpeedConverter.convert(
        telemetry.data.Speed,
        "METERS_PER_SECOND",
        "KILOMETERS_PER_HOUR"
      ),
      speedMph: SpeedConverter.convert(
        telemetry.data.Speed,
        "METERS_PER_SECOND",
        "MILES_PER_HOUR"
      ),
    });

    windows.forEach((win) => {
      win.webContents.send("iracing-data", telemetry);
    });
  });

  irsdkipc.on("connected", (connected) => {
    if (selectedGame !== SelectedGame.iracing) return;
    windows.forEach((win) => {
      win.webContents.send("iracing-data", connected);
    });
  });

  irsdkipc.on("close", () => {
    if (selectedGame !== SelectedGame.iracing) return;
    windows.forEach((win) => {
      win.webContents.send("iracing-data", true);
    });
  });

  irsdkipc.on("spawn", () => {
    if (selectedGame !== SelectedGame.iracing) return;
    windows.forEach((win) => {
      win.webContents.send("iracing-data", true);
    });
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  mainWindow.on("close", () => {
    windows.forEach((win) => {
      win.removeAllListeners("close"); // Remove the close prevention listener
      win.close(); // Close the overlay window
    });

    if (irsdkipc) {
      irsdkipc.removeAllListeners();
      irsdkipc.kill(); // Ensuring child process is terminated
    }
    app.quit();
  });

  ipcMain.on("main-message", (_, data) => {
    if (data === "switch-to-iracing") {
      irsdkipc.open();
      selectedGame = SelectedGame.iracing;
    }
    // TODO: Remove/Replace "disconnect-from-iracing"
    if (data === "disconnect-from-iracing") {
      irsdkipc.kill();
      selectedGame = SelectedGame.none;
    }
  });

  ipcMain.on("title-bar-message", (_, data) => {
    if (data === "close") {
      mainWindow.close();
    } else if (data === "minimize") {
      mainWindow.minimize();
    }
  });

  return mainWindow;
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  windows.push(createWindow());
  // windows.push(
  //   createOverlayWindow(path.join(MODS_PATH, "test", "index.html"), {
  //     width: 1920 / 4,
  //     height: 1080 / 4,
  //   })
  // );
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
